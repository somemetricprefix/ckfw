/*
 * Copyright (c) 2013 somemetricprefix <somemetricprefix+code@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef CKFW_SRC_CORE_EVENTQUEUE_H_
#define CKFW_SRC_CORE_EVENTQUEUE_H_

#include "common.h"

#ifdef __cplusplus
extern "C" {
#endif

// Maximum number of event the queue can hold.
#define EVENT_QUEUE_SIZE 16

enum {
  // Those events are generated in by matrix.c.
  kEventPressed,
  kEventReleased,

  // Generated by timer.c.
  kEventTimeout,
};

// Events are passed by value because they have the same size as a pointer.
typedef struct event {
  uint type;
  uint row;
  uint column;
} Event;

// Add an event to the event queue.
void EventQueueWrite(Event event);

// Removes oldest event from the event queue.
Event EventQueueRead(void);

// Returns true if the queue is empty, false otherwise.
bool EventQueueEmpty(void);

#ifdef __cplusplus
}
#endif

#endif  // CKFW_SRC_CORE_EVENTQUEUE_H_
